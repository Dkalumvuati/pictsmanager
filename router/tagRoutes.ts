import express from "express";
const router = express.Router();
const TagController  = require("../controllers/tagController");

/**
 * @swagger
 * components:
 *  schemas:
 *   Tag:
 *       type : object
 *       properties :
 *        id :
 *         type : integer
 *         description : id of the tag, generated by the database automatically
 *         example : 1
 *        label :
 *         type : string
 *         description : label of the tag
 *         example: "tag1"
 */

/**
 * @swagger
 * /tags:
 *  get:
 *   description: Get all tags. This route is accessible only by admin
 *   summary: Get all tags
 *   responses:
 *    '200':
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        type: array
 *        items:
 *         $ref: '#/components/schemas/Tag'
 *    '404':
 *     description: "No tag found"
 *     content:
 *      application/json:
 *       schema:
 *        type: array
 *        items:
 *         $ref: '#/components/schemas/Tag'
 */
router.route("/").get(TagController.getTags);

/**
 * @swagger
 * /tags/{id}:
 *  get:
 *   description: Get a taga by id.
 *   summary: Get a tag by id
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: integer
 *       description: The id of the tag
 *       required: true
 *       example: 1
 *   responses:
 *    '200':
 *     description: Success
 */
router.route("/:id").get(TagController.getTag);

/**
 * @swagger
 * /tags/admin:
 *  post:
 *   description: Create a new tag. This route is accessible only by admin
 *   summary: Create a new tag
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       properties:
 *        label:
 *         type: string
 *         description: The label of the tag
 *         example: "tag1"
 *         required: true
 *   responses:
 *    '200':
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/Tag'
 *        description: The tag created
 *        example:
 *         id: 1
 *         label: "tag1"
 *         createdAt: "2020-05-06T12:00:00.000Z"
 *         updatedAt: "2020-05-06T12:00:00.000Z"
 *         pictures: []
 *    '401':
 *     description: Unauthorized
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/Tag'
 *        description: The tag created
 *        example:
 *         message: "Access denied | You have to be admin for this action."
 */
router.route("/admin").post(TagController.createTag);

/**
 * @swagger
 * /tags/admin/{id}:
 *  put:
 *   description: Update a tag. This route is accessible only by admin
 *   summary: Update a tag
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: integer
 *       description: The id of the tag
 *       required: true
 *       example: 1
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       properties:
 *        label:
 *         type: string
 *         description: The label of the tag
 *         example: "tag1"
 *         required: true
 *   responses:
 *    '200':
 *     description: updated tag information with the new label
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/Tag'
 *        description: The tag created
 *        example:
 *         id: 1
 *         label: "tag1"
 *         createdAt: "2020-05-06T12:00:00.000Z"
 *         updatedAt: "2020-05-06T12:00:00.000Z"
 *    '201':
 *     description: Created Tag successfully
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/Tag'
 *        description: The tag created
 *        example:
 *         id: 1
 *         label: "tag1"
 *         createdAt: "2020-05-06T12:00:00.000Z"
 *         updatedAt: "2020-05-06T12:00:00.000Z"
 *    '401':
 *     description: Created Tag successfully
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/Tag'
 *        description: The tag created
 *        example:
 *         message: "Access denied | You have to be admin for this action."
 */
router.route("/admin/:id").put(TagController.updateTag);

/**
 * @swagger
 * /tags/admin/{id}:
 *  delete:
 *   description: Delete a tag by id. This route is accessible only by admin
 *   summary: Delete a tag by id
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: integer
 *       description: The id of the tag to delete
 *       required: true
 *       example: 1
 *   responses:
 *    '200':
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        properties:
 *         message:
 *          type: string
 *          description: The message of the response
 *          example: "Tag was deleted successfuly"
 *    401:
 *     description: This route is accessible only by admin
 *     content:
 *      application/json:
 *       schema:
 *        properties:
 *         message:
 *          type: string
 *          description: The message of the response
 *          example: "You cannot delete this Tag | Access denied"
 *    404:
 *     description: you try to delete a tag that doesn't exist or is already deleted
 *     content:
 *      application/json:
 *       schema:
 *        properties:
 *         message:
 *          type: string
 *          description: The message of the response
 *          example: "Tag not found"
 */
router.route("/admin/:id").delete(TagController.deleteTag);

module.exports = router;